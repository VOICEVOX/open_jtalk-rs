name: test workflow
on: [push, pull_request]
jobs:
  rust-lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - uses: Swatinem/rust-cache@v1
      - run: cargo clippy --all-features --tests -- -D clippy::all -D warnings --no-deps
      - run: cargo fmt -- --check

  rust-test:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-2019
          - os: windows-2022
          - os: macos-10.15
          - os: macos-11
          - os: macos-12
          - os: ubuntu-18.04
          - os: ubuntu-20.04
    runs-on: ${{ matrix.os }}
    steps:
      - name: Install LLVM and Clang # required for bindgen to work, see https://github.com/rust-lang/rust-bindgen/issues/1797
        uses: KyleMayes/install-llvm-action@32c4866ebb71e0949e8833eb49beeebed48532bd
        if: matrix.os == 'windows-2019'
        with:
          version: "11.0"
          directory: ${{ runner.temp }}/llvm
      - name: Set LIBCLANG_PATH
        run: echo "LIBCLANG_PATH=$((gcm clang).source -replace "clang.exe")" >> $env:GITHUB_ENV
        if: matrix.os == 'windows-2019'
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - uses: Swatinem/rust-cache@v1
        with:
          # cargoのキャッシュが原因でテストが失敗する場合はバージョン部分をカウントアップすること
          key: "v1-cargo-test-cache-${{ matrix.os }}"
      - run: cargo test --all-features
  rust_build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            target: x86_64-pc-windows-msvc
          - os: windows-latest
            target: i686-pc-windows-msvc
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            target: aarch64-linux-android
          - os: macos-latest
            target: aarch64-apple-darwin
          - os: macos-latest
            target: x86_64-apple-darwin
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - uses: nttld/setup-ndk@v1
        if: matrix.target == 'aarch64-linux-android'
        with:
          ndk-version: r25b
      - name: Set path for android
        if: matrix.target == 'aarch64-linux-android'
        shell: bash
        run: |
          echo "$ANDROID_NDK/toolchains/llvm/prebuilt/linux-x86_64/bin" >> "$GITHUB_PATH"
          echo "AR_aarch64_linux_android=llvm-ar" >> "$GITHUB_ENV"
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          default: true
      - run: cargo build --target ${{ matrix.target }} --release
    env:
      ARCH: ${{ matrix.arch }}

env:
  CARGO_TERM_COLOR: always
